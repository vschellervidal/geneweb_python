name: Push ‚Üí Open/Update PR

on:
  push:
    branches: ['issue-*']

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  ensure-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Open PR if not exists + set statuses
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const head  = context.ref.replace('refs/heads/', '');

            // Helpers
            const STATUS = ['not started','in progress','in review','changes requested','approved'];
            async function setStatus_onPR(pr_number, name) {
              for (const s of STATUS) {
                if (s !== name) {
                  try { await github.rest.issues.removeLabel({ owner, repo, issue_number: pr_number, name: s }); } catch {}
                }
              }
              await github.rest.issues.addLabels({ owner, repo, issue_number: pr_number, labels: [name] });
            }
            async function setStatus_onIssue(issue_number, name) {
              for (const s of STATUS) {
                if (s !== name) {
                  try { await github.rest.issues.removeLabel({ owner, repo, issue_number, name: s }); } catch {}
                }
              }
              await github.rest.issues.addLabels({ owner, repo, issue_number, labels: [name] });
            }

            // Identifie l'issue depuis le nom de branche
            const m = head.match(/^issue-(\d+)(?:-.+)?$/);
            if (!m) return;
            const issue_number = Number(m[1]);

            // Base = branche par d√©faut
            const { data: repoData } = await github.rest.repos.get({ owner, repo });
            const base = repoData.default_branch;

            // PR existante ?
            const { data: prs } = await github.rest.pulls.list({ owner, repo, head: `${owner}:${head}`, state: 'open' });
            if (prs.length) {
              const pr = prs[0];
              // S'assure que le body ferme l'issue
              const body = (pr.body || '');
              if (!/Closes\s+#\d+/i.test(body)) {
                await github.rest.pulls.update({
                  owner, repo, pull_number: pr.number,
                  body: `${body.trim()}\n\nCloses #${issue_number}`
                });
              }
              // Statuts "in review"
              await setStatus_onPR(pr.number, 'in review');
              await setStatus_onIssue(issue_number, 'in review');
              return;
            }

            // Ouvre une PR
            const { data: issue } = await github.rest.issues.get({ owner, repo, issue_number });
            const title = `Issue #${issue.number}: ${issue.title}`;
            const body  = `Closes #${issue.number}\n\nPR cr√©√©e automatiquement au premier push.`;

            const { data: pr } = await github.rest.pulls.create({
              owner, repo, title, head, base, body, draft: false
            });

            // Statuts "in review" (PR + Issue)
            await setStatus_onPR(pr.number, 'in review');
            await setStatus_onIssue(issue.number, 'in review');

            // Note sur l‚Äôissue
            await github.rest.issues.createComment({
              owner, repo, issue_number: issue.number,
              body: `üîÅ PR #${pr.number} ouverte pour la branche \`${head}\`.`
            });
