#!/usr/bin/env python3
"""Script pour g√©n√©rer les snapshots GEDCOM de r√©f√©rence depuis OCaml.

Ce script utilise le bridge OCaml pour convertir toutes les fixtures GWB
en fichiers GEDCOM normalis√©s qui serviront de r√©f√©rence pour les tests.
"""

from __future__ import annotations

import os
import sys
from pathlib import Path

# Ajouter le src au path pour les imports
project_root = Path(__file__).parent.parent
src_path = project_root / "src"
sys.path.insert(0, str(src_path))

from geneweb.adapters.ocaml_bridge.bridge import run_gwb2ged
from geneweb.domain.gedcom_normalizer import normalize_gedcom_file


def main() -> None:
    """G√©n√®re tous les snapshots GEDCOM de r√©f√©rence."""
    # V√©rifier que GENEWEB_OCAML_ROOT est d√©fini
    ocaml_root = os.getenv("GENEWEB_OCAML_ROOT")
    if not ocaml_root:
        print("‚ùå GENEWEB_OCAML_ROOT non d√©fini")
        print("   Exportez cette variable vers votre installation OCaml compil√©e")
        sys.exit(1)

    ocaml_root_path = Path(ocaml_root)
    if not ocaml_root_path.exists():
        print(f"‚ùå GENEWEB_OCAML_ROOT pointe vers un chemin inexistant: {ocaml_root}")
        sys.exit(1)

    print(f"‚úÖ Utilisation de GENEWEB_OCAML_ROOT: {ocaml_root}")

    # Chemins des fixtures et snapshots
    fixtures_root = project_root / "tests" / "fixtures" / "gwb"
    snapshots_root = project_root / "tests" / "fixtures" / "gedcom" / "snapshots"

    # Mapping des fixtures vers les snapshots
    fixtures_mapping = [
        ("small/demo_min", "small/demo_min.ged"),
        ("medium/demo_copy", "medium/demo_copy.ged"),
        ("edge/encodage_min", "edge/encodage_min.ged"),
    ]

    print(f"üìÅ Fixtures: {fixtures_root}")
    print(f"üìÅ Snapshots: {snapshots_root}")
    print()

    success_count = 0
    total_count = len(fixtures_mapping)

    for fixture_rel_path, snapshot_rel_path in fixtures_mapping:
        fixture_path = fixtures_root / fixture_rel_path / "base"
        snapshot_path = snapshots_root / snapshot_rel_path

        print(f"üîÑ Traitement: {fixture_rel_path}")

        # V√©rifier que la fixture existe
        if not fixture_path.exists():
            print(f"   ‚ö†Ô∏è  Fixture introuvable: {fixture_path}")
            continue

        # V√©rifier la taille de la fixture
        fixture_size = fixture_path.stat().st_size
        if fixture_size == 0:
            print(f"   ‚ö†Ô∏è  Fixture vide (0 bytes): {fixture_path}")
            # Cr√©er un snapshot vide pour les cas particuliers
            snapshot_path.parent.mkdir(parents=True, exist_ok=True)
            snapshot_path.write_text("", encoding="utf-8")
            print(f"   ‚úÖ Snapshot vide cr√©√©: {snapshot_path}")
            success_count += 1
            continue

        try:
            # Cr√©er un fichier temporaire pour la conversion
            import tempfile

            with tempfile.NamedTemporaryFile(suffix=".ged", delete=False) as tmp_file:
                tmp_path = Path(tmp_file.name)

            # Convertir GWB ‚Üí GEDCOM via OCaml
            print(f"   üîÑ Conversion OCaml: {fixture_path} ‚Üí {tmp_path}")
            run_gwb2ged([str(fixture_path), "-o", str(tmp_path)])

            # V√©rifier que la conversion a r√©ussi
            if not tmp_path.exists() or tmp_path.stat().st_size == 0:
                print("   ‚ùå Conversion √©chou√©e: fichier vide ou inexistant")
                continue

            # Normaliser et sauvegarder le snapshot
            print(f"   üîÑ Normalisation: {tmp_path} ‚Üí {snapshot_path}")
            normalize_gedcom_file(tmp_path, snapshot_path)

            # Nettoyer le fichier temporaire
            tmp_path.unlink()

            # V√©rifier le r√©sultat
            snapshot_size = snapshot_path.stat().st_size
            print(f"   ‚úÖ Snapshot cr√©√©: {snapshot_path} ({snapshot_size} bytes)")
            success_count += 1

        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")
            continue

        print()

    # R√©sum√©
    print("=" * 50)
    print(f"üìä R√©sum√©: {success_count}/{total_count} snapshots g√©n√©r√©s")

    if success_count == total_count:
        print("üéâ Tous les snapshots ont √©t√© g√©n√©r√©s avec succ√®s!")
        print()
        print("üìù Prochaines √©tapes:")
        print("   1. V√©rifier les snapshots g√©n√©r√©s")
        print("   2. Cr√©er les tests de comparaison")
        print("   3. Valider la parit√© Python vs OCaml")
    else:
        print(f"‚ö†Ô∏è  {total_count - success_count} snapshots n'ont pas pu √™tre g√©n√©r√©s")
        sys.exit(1)


if __name__ == "__main__":
    main()
